"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.parser = void 0;
var dns_1 = require("dns");
var validator_1 = require("./validator");
var dns = new dns_1.promises.Resolver();
var parser = function (policy) { return __awaiter(void 0, void 0, void 0, function () {
    var terms, rules, retval, _i, rules_1, rule, term, value, found, _a, _b, validatorTerm, settings, termRegex, tag;
    return __generator(this, function (_c) {
        terms = policy
            .split(/;/)
            .map(function (t) { return t.trim(); }) // Trim surrounding whitespace
            .filter(function (x) { return x !== ""; });
        rules = terms.map(function (x) { return x.split(/[=]/).map(function (p) { return p.trim(); }); });
        retval = {
            tags: {},
            messages: []
        };
        // Make sure `v` is the first tag
        if (!/^v$/i.test(rules[0][0])) {
            retval.messages.push("First tag in a DMARC policy must be 'v', but found: '".concat(rules[0][0], "'"));
            return [2 /*return*/, retval];
        }
        for (_i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            rule = rules_1[_i];
            term = rule[0];
            value = rule[1];
            found = false;
            for (_a = 0, _b = Object.keys(validator_1.validators); _a < _b.length; _a++) {
                validatorTerm = _b[_a];
                settings = validator_1.validators[validatorTerm];
                // Term matches validaor
                debugger;
                termRegex = new RegExp("^".concat(validatorTerm, "$"), "i");
                if (termRegex.test(term)) {
                    found = true;
                    tag = {
                        // tag: term,
                        description: settings.description
                    };
                    if (settings.validate) {
                        try {
                            settings.validate.call(settings, term, value);
                            tag.value = value;
                            retval.tags[term] = tag;
                        }
                        catch (err) {
                            retval.messages.push(err.message);
                        }
                    }
                    break;
                }
            }
            if (!found) {
                retval.messages.push("Unknown tag '".concat(term, "'"));
            }
        }
        // Remove "messages"
        if (retval.messages.length === 0) {
            delete retval.messages;
        }
        return [2 /*return*/, retval];
    });
}); };
exports.parser = parser;
